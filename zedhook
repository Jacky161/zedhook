#!/usr/bin/env sh

# Program name.
prog_name="${0##*/}"

# Defaults.
opt_message=''
opt_subject="${prog_name} alert"
opt_file="/var/log/${prog_name}.log"

# Usage.
usage ()
{
  echo "Usage: ${prog_name} [-s subject] ...
  -s, --subject      Specify subject on command line (only the first argument after the -s flag is used as a subject; be careful to quote subjects containing spaces).
  -f, --file         Change the location of the ${prog_name} log file (default location is <${opt_file}>).
  -h, --help         Print this usage message.
"
}
[ $# -eq 0 ] && usage && exit 2

# Options.
while getopts ':h(help):s:(subject):f:(file)' arg
do
  case "${arg}" in
    s)
      opt_subject="${OPTARG}"
      ;;
    f)
      opt_file="${OPTARG}"
      ;;
    h | *)
      usage
      exit 0
      ;;
  esac
done
shift "$(($OPTIND - 1))"

# Input.
[ -t 0 ] && {
  echo 'Error: STDIN is missing.'
  exit 2
} || opt_message="$(cat </dev/stdin)"

# Log to file.
touch "${opt_file}" && {
cat << EOF >> "${opt_file}"
|-------------------------- $(date -u '+%Y-%m-%d %H:%M:%S') UTC --------------------------|
Subject: ${opt_subject}

${opt_message}
|-----------------------------------------------------------------------------|
EOF
} || echo "Warning: log file <${opt_file}> is not writeable."

# Field separator is newline, tab, empty newline.
IFS="	

"

# Encode newlines as HTML entities.
json_message=''
for line in ${opt_message}; do
  json_message="${json_message}${line}&#13;"
done

# Sanitize.
json_message="$(echo "${json_message}" | sed 's/"/\\\"/g')"
json_message="$(echo "${json_message}" | sed "s/'/'\"'\"'/g")"
json_subject="$(echo "${opt_subject}" | sed 's/"/\\\"/g')"
json_subject="$(echo "${json_subject}" | sed "s/'/'\"'\"'/g")"

# Arguments.
json_header='Content-Type: application/json'
json_data="$(printf '{"subject": "%s", "message": "%s"}' "${json_subject}" "${json_message}")"

# Post.
if command -v curl >/dev/null 2>&1
then
  eval "$(printf "curl -H '%s' -X POST -d '%s' --insecure %s" "${json_header}" "${json_data}" "$@")"
elif command -v wget >/dev/null 2>&1
then
  eval "$(printf "wget -O- --header='%s' --post-data='%s' --no-check-certificate %s" "${json_header}" "${json_data}" "$@")"
else
  echo 'Error: Could not find curl or wget.'
  exit 127
fi

echo
exit 0

